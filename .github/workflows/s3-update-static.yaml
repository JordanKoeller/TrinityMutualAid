name: S3-Update-Static

on:
  push:
    branches: 
      - main
      - develop

env:
  REGION: 'us-east-1'

jobs:
  infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Activate Staging Infra
        if: endsWith(github.ref, '/develop')
        run: |
          echo "APPLICATION_DOMAIN_NAME=staging.trinitymutualaid.com" >> $GITHUB_ENV
          echo "APPLICATION_STAGE=staging" >> $GITHUB_ENV
          echo "CFN_BUCKET_NAME=staging-tma-cfn" >> $GITHUB_ENV
          echo "STACK_NAME=staging-tma" >> $GITHUB_ENV
          echo "ACM_CERTIFICATE_ARN=${{ secrets.STAGING_CERTIFICATE_ARN }}" >> $GITHUB_ENV 
      - name: Activate Production Infra
        if: endsWith(github.ref, '/main')
        run: |
          echo "APPLICATION_DOMAIN_NAME=trinitymutualaid.com" >> $GITHUB_ENV
          echo "APPLICATION_STAGE=prod" >> $GITHUB_ENV
          echo "CFN_BUCKET_NAME=production-tma-cfn" >> $GITHUB_ENV
          echo "STACK_NAME=production-tma" >> $GITHUB_ENV
          echo "ACM_CERTIFICATE_ARN=${{ secrets.PRODUCTION_CERTIFICATE_ARN }}" >> $GITHUB_ENV

      - name: Deploy to AWS CloudFormation
        run: >
          aws cloudformation deploy --template-file ./frontend/template.yml --stack-name $STACK_NAME 
          --s3-bucket $CFN_BUCKET_NAME --force-upload --no-fail-on-empty-changeset --no-disable-rollback
          --parameter-overrides pApplicationDomainName=$APPLICATION_DOMAIN_NAME
          pStage=$APPLICATION_STAGE pAcmCertificateArn="$ACM_CERTIFICATE_ARN"

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Build
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'
      - name: Activate Staging Build
        if: endsWith(github.ref, '/develop')
        env:
          ENV_FILE_STAGING: ${{  secrets.ENV_FILE_STAGING  }}
        run: |
          echo "AWS_S3_BUCKET=dev.trinitymutualaid.com" >> $GITHUB_ENV
          echo "$ENV_FILE_STAGING" | base64 -d > ./frontend/.env
          echo "AWS_CLOUDFRONT_DISTRIBUTION_ID=${{secrets.STAGING_CLOUDFRONT_ID}}" >> $GITHUB_ENV
      - name: ActivateProduction Build
        env:
          ENV_FILE_PRODUCTION: ${{  secrets.ENV_FILE_PRODUCTION }}
        if: endsWith(github.ref, '/main')
        run: |
          echo "AWS_S3_BUCKET=trinitymutualaid.com" >> $GITHUB_ENV
          echo "$ENV_FILE_PRODUCTION" | base64 -d > ./frontend/.env
          echo "AWS_CLOUDFRONT_DISTRIBUTION_ID=${{secrets.PRODUCTION_CLOUDFRONT_ID}}" >> $GITHUB_ENV
      - name: Build Staticfiles
        run: |
          cd ./frontend
          wc -m .env
          npm install
          npm run-script build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Upload to S3 Bucket
        run: >
          aws s3 sync ./frontend/build s3://$AWS_S3_BUCKET --delete --follow-symlinks --cache-control max-age=31536000,public
  
      - name: Invalidate Staticfiles Cloudfront
        run: >
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
  

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  tma
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  pStage:
    Description: Environment stage
    Type: String
    AllowedValues:
      - dev
      - prod
      - staging

Mappings:
  StageValueMap:
    dev:
      s3ResourcesBucket: dev-tma-files
      siteOrigin: "'http://localhost:3000'"
      apiStage: Dev
    staging:
      s3ResourcesBucket: staging-tma-files
      siteOrigin: "'http://dev.trinitymutualaid.com'"
      apiStage: Dev
    prod:
      s3ResourcesBucket: prod-tma-files
      siteOrigin: "'http://trinitymutualaid.com'"
      apiStage: Prod
  
Resources:
  TMAApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !FindInMap [StageValueMap, !Ref pStage, apiStage]
      Cors:
        AllowCredentials: true
        AllowMethods: "'GET,HEAD,OPTIONS,POST,PUT,PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !FindInMap [StageValueMap, !Ref pStage, siteOrigin]
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt TMAUserPool.Arn
  ArticlesCrudFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/handlers.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Lambda for CRUD operations on articles.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Articles
        - S3CrudPolicy:
            BucketName: !Ref S3ResourcesBucket
      Environment:
        Variables:
          ARTICLES_TABLE: !Ref Articles
          RESOURCES_BUCKET: !Ref S3ResourcesBucket
      Events:
        Hello:
          Type: Api
          Properties:
            RestApiId: !Ref TMAApi
            Path: /hello
            Method: GET
        S3UploadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref TMAApi
            Path: /file-upload
            Method: GET
        PutArticle:
          Type: Api
          Properties:
            RestApiId: !Ref TMAApi
            Path: /article
            Method: PUT
        PatchArticle:
          Type: Api
          Properties:
            RestApiId: !Ref TMAApi
            Path: /article/{articleId}
            Method: PATCH
        GetArticle:
          Type: Api
          Properties:
            RestApiId: !Ref TMAApi
            Path: /{language}/article/{articleId}
            Auth:
              Authorizer: NONE
            Method: GET
  Articles:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub tma-articles-${pStage}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  S3ResourcesBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !FindInMap [StageValueMap, !Ref pStage, s3ResourcesBucket]
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET', 'PUT', 'HEAD']
            AllowedOrigins:
              - 'http://trinitymutualaid.com'
              - 'http://www.trinitymutualaid.com'
              - 'http://dev.trinitymutualaid.com'
              - 'http://localhost:3000'
            MaxAge: 3000
  BucketReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3ResourcesBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3ResourcesBucket}/*'
            Principal: '*'
  TMAUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub TMAUserPool-${pStage}
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  TMAMobileWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref TMAUserPool
      ClientName: !Sub TMAMobileWebClient-${pStage}
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
  TMAIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub TMAIdentityPool-${pStage}
      AllowClassicFlow: true
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref TMAMobileWebClient
          ProviderName: !GetAtt TMAUserPool.ProviderName
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref TMAIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub CognitoUnauthorizedPolicy-${pStage}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  # - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref TMAIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub CognitoAuthorizedPolicy-${pStage}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref TMAIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${TMAApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  TMAUserPoolId:
    Value: !Ref TMAUserPool
    Export:
      Name: !Sub "TMAUserPool-${pStage}::Id"
  TMAIdentityPoolId:
    Value: !Ref TMAIdentityPool
    Export:
      Name: !Sub "TMAIdentityPool-${pStage}::Id"
  TMAMobileWebClientId:
    Value: !Ref TMAMobileWebClient
    Export:
      Name: !Sub "TMAMobileWebClient-${pStage}::Id"
  S3UploadBucketName:
    Description: "S3 bucket for application uploads"
    Value: !Ref S3ResourcesBucket